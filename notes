Problems


    1 - After registering user, l see deep execution problem in the home apge, especially in choose languagecomponent
    2 - Need to also adding some statistics for learned screen. if the one language select, show only words.
    3 - Dont show the choose language in home page, if there is not any languages
    4 - Add flag to the choosing languages in words and learned words screen


Please act like a senior reacti-native and expo developer and help me to fix the problem in the code.
Problem: When l select the starred in filter, l see the starred words, but when l go to the another screen and return back, l wanna see again the starred words, but l see all words again. I wanna change starred in WordScreen.jsx 
for starred words, l cant see it. 

WordScreen.jsx
    
// WordsScreen.jsx
export default function WordScreen() {
    const dispatch = useDispatch();

    const { words, loading, selectedLanguage, availableLanguages } = useSelector((state) => state.wordSlice);

    const [starred, setStarred] = useState(false);

    const { is_auth } = useSelector((state) => state.authSlice);

    const [screen, setScreen] = useState('all');

    // Fetch all available languages
    useFocusEffect(
        useCallback(() => {
            console.log('selected language is in the words secreen ...........................................................', selectedLanguage)
            if (is_auth) {
                dispatch(WordService.fetchAvailableLanguages());
                console.log('starred is 2', starred)
                if (starred){

                    dispatch(WordService.handleLanguageSelect({
                                filter: 'starred',
                                langCode: selectedLanguage
                            }))
                }
                else{
                    dispatch(WordService.handleLanguageSelect({
                                filter: 'all',
                                langCode: selectedLanguage
                            }))
                }
            }
        }, [is_auth])
    );

    useFocusEffect(
        useCallback(() => {
            if (is_auth && selectedLanguage) {
            // dispatch(WordService.handleLanguageSelect({
            //     filter: 'all',
            //     langCode: selectedLanguage, // ✅ Now safe — runs when it changes
            // }));
            console.log('starred is 2', starred)
            if (starred){
                    dispatch(WordService.handleLanguageSelect({
                                filter: 'starred',
                                langCode: selectedLanguage
                            }))
                }
                else{
                    dispatch(WordService.handleLanguageSelect({
                                filter: 'all',
                                langCode: selectedLanguage
                            }))
                }
            }
        }, [is_auth, dispatch, selectedLanguage]) // ✅ Added dependency
    );

    useEffect(() => {
        if (availableLanguages.length === 1) {
            dispatch(WordService.handleLanguageSelect({
                filter: 'all',
                langCode: availableLanguages[0].lang
            }));
            dispatch(setSelectedLanguage(availableLanguages[0].lang));
            setScreen('all');
        }
    }, [availableLanguages]);


    return (
        <SafeAreaView className='bg-white flex-1'>

            {
                selectedLanguage &&
                <FilterComponent 
                    screen={screen}
                    setScreen={setScreen}
                    setStarred={setStarred}
                />
            }

FilterComponent.jsx

    const FilterComponent = ({screen = 'all', setStarred}) => {

        const dispatch = useDispatch();

        const [filter, setFilter] = useState('all'); // 'all' or 'starred'

        const [searchQuery, setSearchQuery] = useState('');

        const { selectedLanguage, availableLanguages } = useSelector((state) => state.wordSlice);

        const toggleFilter = () => {
            setFilter(prev => prev === 'all' ? 'starred' : 'all');
        };

        useEffect(() => {
            dispatch(WordService.handleLanguageSelect({
            langCode: selectedLanguage,
            filter: filter
            }));
            setStarred(filter === 'starred' ? true : false);
        }, [filter]);

        useEffect(() => {
            setFilter('all');
        }, [selectedLanguage]);

